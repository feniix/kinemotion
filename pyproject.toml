[project]
name = "kinemotion"
version = "0.5.1"
description = "Video-based kinematic analysis for athletic performance"
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = {text = "MIT"}
authors = [
    {name = "Sebastian Otaegui", email = "feniix@gmail.com"}
]
keywords = ["kinemotion", "kinemetry", "video-analysis", "drop-jump", "athletic-performance", "pose-tracking", "mediapipe"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Multimedia :: Video",
]
dependencies = [
    "click>=8.1.7",
    "opencv-python>=4.9.0",
    "mediapipe>=0.10.9",
    "numpy>=1.26.0",
    "scipy>=1.11.0",
]

[project.urls]
Homepage = "https://github.com/feniix/kinemotion"
Repository = "https://github.com/feniix/kinemotion"
Issues = "https://github.com/feniix/kinemotion/issues"

[project.scripts]
kinemotion = "kinemotion.cli:cli"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/kinemotion"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.3",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
    "python-semantic-release>=9.8.2",
]


[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
]
ignore = []

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cv2.*",
    "mediapipe.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "uv build"
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_pypi = true
upload_to_repository = false
remove_dist = false
patch_without_tag = false
major_on_zero = false
allow_zero_version = true
commit_message = "chore(release): {version} [skip ci]"

[tool.semantic_release.publish]
upload_to_pypi = true
pypi_token_variable = "PYPI_API_TOKEN"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "chore", "build", "ci"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
